diff --git a/app/services/responsibilities.service.spec.ts b/app/services/responsibilities.service.spec.ts
index aaa82fc8..4adf9360 100644
--- a/app/services/responsibilities.service.spec.ts
+++ b/app/services/responsibilities.service.spec.ts
@@ -4,9 +4,11 @@ import * as Chance from 'chance';
 
 import { DateRangeTimePeriodValue } from '../enums/date-range-time-period.enum';
 import { DistributionTypeValue } from '../enums/distribution-type.enum';
+// import { EntityPeopleType } from '../enums/entity-responsibilities.enum';
 import { EntitiesTotalPerformances, EntitiesTotalPerformancesDTO } from '../models/entities-total-performances.model';
 import { EntityDTO } from '../models/entity-dto.model';
 import { getEntityPeopleResponsibilitiesMock } from '../models/entity-responsibilities.model.mock';
+// import { getMyPerformanceTableRowMock } from '../models/my-performance-table-row.model.mock';
 import { getEntitiesTotalPerformancesMock,
          getEntitiesTotalPerformancesDTOMock } from '../models/entities-total-performances.model.mock';
 import { getEntitiesPerformancesMock, getResponsibilityEntitiesPerformanceDTOMock } from '../models/entities-performances.model.mock';
@@ -37,6 +39,7 @@ describe('Responsibilities Effects', () => {
   let performanceTotalMock: EntitiesTotalPerformances;
   let entitiesTotalPerformancesDTOMock: EntitiesTotalPerformancesDTO;
   let entityDTOMock: EntityDTO;
+  // const error = new Error(chance.string());
 
   const performanceFilterStateMock: MyPerformanceFilterState = {
     metricType: MetricTypeValue.PointsOfDistribution,
@@ -60,6 +63,15 @@ describe('Responsibilities Effects', () => {
     }
   };
 
+  const performanceTransformerServiceMock = {
+    transformEntitiesTotalPerformancesDTO(mockArgs: any): EntitiesTotalPerformances {
+      return performanceTotalMock;
+    },
+    transformEntitiesPerformancesDTO(mockArgs: any): EntitiesPerformances[] {
+      return entitiesPerformanceMock;
+    }
+  };
+
   const responsibilitiesTransformerServiceMock = {
     groupPeopleByGroupedEntities(mockArgs: any): GroupedEntities {
       return groupedEntitiesMock;
@@ -74,21 +86,6 @@ describe('Responsibilities Effects', () => {
   let performanceTransformerService: PerformanceTransformerService;
   let responsibilitiesTransformerService: ResponsibilitiesTransformerService;
 
-  const performanceTransformerServiceMock = {
-    transformEntitiesTotalPerformancesDTO(mockArgs: any): EntitiesTotalPerformances {
-      return performanceTotalMock;
-    },
-    transformEntitiesPerformancesDTOs(mockArgs: any): EntitiesPerformances[] {
-      return entitiesPerformanceMock;
-    },
-    transformEntityDTOsWithPerformance(mockArgs: any): EntitiesTotalPerformances {
-      return performanceTotalMock;
-    },
-    transformEntitiesPerformancesDTO(mockArgs: any): EntitiesTotalPerformances {
-      return performanceTotalMock;
-    }
-  };
-
   beforeEach(() => TestBed.configureTestingModule({
     providers: [
       ResponsibilitiesService,
@@ -279,7 +276,7 @@ describe('Responsibilities Effects', () => {
   });
 
   describe('when getPerformanceTotalForGroupedEntities is called', () => {
-    describe('when called for roleGroups', () => {
+    fdescribe('when called for roleGroups', () => {
       const responsibilitiesDataMock: ResponsibilitiesData = {
         positionId: positionIdMock,
         viewType: ViewType.roleGroups,
@@ -287,7 +284,6 @@ describe('Responsibilities Effects', () => {
           type: chance.string(),
           name: chance.string()
         }],
-        groupedEntities: accountsDistributorsMock,
         filter: performanceFilterStateMock
       };
 
@@ -301,8 +297,7 @@ describe('Responsibilities Effects', () => {
           viewType: ViewType.roleGroups,
           entityTypes: responsibilitiesDataMock.entityTypes,
           filter: responsibilitiesDataMock.filter,
-          entitiesPerformances: entitiesPerformanceMock,
-          groupedEntities: responsibilitiesDataMock.groupedEntities
+          entitiesPerformances: entitiesPerformanceMock
         };
 
         responsibilitiesService.getPerformanceTotalForGroupedEntities(responsibilitiesDataMock)
@@ -327,6 +322,20 @@ describe('Responsibilities Effects', () => {
           responsibilitiesDataMock.positionId
         ]);
       });
+
+      it('does not call getPerformanceTotalForGroupedEntities if we are not viewing role groups', (done) => {
+        responsibilitiesDataMock.viewType = ViewType.accounts;
+        const getResponsibilitiesPerformanceSpy = spyOn(responsibilitiesService, 'getResponsibilitiesPerformanceTotals').and.callThrough();
+
+        responsibilitiesService.getPerformanceTotalForGroupedEntities(responsibilitiesDataMock).subscribe(
+          (responsibilitiesData: ResponsibilitiesData) => {
+          expect(responsibilitiesDataMock).toBe(responsibilitiesData);
+
+          done();
+        });
+
+        expect(getResponsibilitiesPerformanceSpy.calls.count()).toBe(0);
+      });
     });
   });
 
@@ -417,9 +426,9 @@ describe('Responsibilities Effects', () => {
         positionIdMock
         )
         .subscribe((entitiesPerformances: EntitiesPerformances[]) => {
-          expect(entitiesPerformances).toBe(entitiesPerformanceMock);
+        expect(entitiesPerformances).toBe(entitiesPerformanceMock);
 
-          done();
+        done();
       });
     });
 
@@ -491,8 +500,8 @@ describe('Responsibilities Effects', () => {
       ]);
     });
 
-    it('calls transformEntitiesPerformancesDTOs with the right parameters', (done) => {
-      const transformerSpy = spyOn(performanceTransformerService, 'transformEntitiesPerformancesDTOs').and.callThrough();
+    it('calls transformEntitiesPerformancesDTO with the right parameters', (done) => {
+      const transformerSpy = spyOn(performanceTransformerService, 'transformEntitiesPerformancesDTO').and.callThrough();
 
       responsibilitiesService.getResponsibilitiesPerformanceTotals(entities, performanceFilterStateMock)
         .subscribe((entitiesPerformances: EntitiesPerformances[]) => {
diff --git a/app/services/responsibilities.service.ts b/app/services/responsibilities.service.ts
index 695ddb86..73147529 100644
--- a/app/services/responsibilities.service.ts
+++ b/app/services/responsibilities.service.ts
@@ -97,39 +97,46 @@ export class ResponsibilitiesService {
   }
 
   public getPerformanceTotalForGroupedEntities(responsibilitiesData: ResponsibilitiesData)
-  : Observable<ResponsibilitiesData> {
-  if (responsibilitiesData.viewType === ViewType.roleGroups) {
-    return this.getResponsibilitiesPerformanceTotals(responsibilitiesData.entityTypes,
-      responsibilitiesData.filter,
-      responsibilitiesData.positionId)
-    .switchMap((entityPerformances: EntitiesPerformances[]) => {
-      responsibilitiesData.entitiesPerformances = entityPerformances;
+    : Observable<ResponsibilitiesData> {
+    if (responsibilitiesData.viewType === ViewType.roleGroups) {
+      return this.myPerformanceApiService
+        // .getResponsibilitiesPerformanceTotals(responsibilitiesData.entityTypes,
+        //   responsibilitiesData.filter,
+        //   responsibilitiesData.positionId)
+        .getResponsibilitiesPerformanceTotals(
+          responsibilitiesData.entityTypes,
+          responsibilitiesData.filter,
+          responsibilitiesData.positionId
+        )
+        .mergeMap((response: EntitiesPerformancesDTO[]) => {
+          responsibilitiesData.entitiesPerformances
+            = this.performanceTransformerService.transformEntitiesPerformancesDTOs(response);
+          return Observable.of(responsibilitiesData);
+      });
+    } else if (responsibilitiesData.viewType === ViewType.distributors) {
+      return this.myPerformanceApiService
+        .getDistributorsPerformanceTotals(responsibilitiesData.groupedEntities.all,
+          responsibilitiesData.filter)
+        .mergeMap((response: EntitiesTotalPerformancesDTO[]) => {
+          responsibilitiesData.entitiesPerformances
+            = this.performanceTransformerService
+              .transformEntityDTOsWithPerformance(response, responsibilitiesData.groupedEntities.all);
+          return Observable.of(responsibilitiesData);
+      });
+    } else if (responsibilitiesData.viewType === ViewType.accounts) {
+      return this.myPerformanceApiService
+        .getAccountsPerformanceTotals(responsibilitiesData.groupedEntities.all,
+          responsibilitiesData.filter)
+        .mergeMap((response: EntitiesTotalPerformancesDTO[]) => {
+          responsibilitiesData.entitiesPerformances
+            = this.performanceTransformerService
+              .transformEntityDTOsWithPerformance(response, responsibilitiesData.groupedEntities.all);
+          return Observable.of(responsibilitiesData);
+      });
+    } else {
       return Observable.of(responsibilitiesData);
-    });
-  } else if (responsibilitiesData.viewType === ViewType.distributors) {
-    return this.myPerformanceApiService
-      .getDistributorsPerformanceTotals(responsibilitiesData.groupedEntities.all,
-        responsibilitiesData.filter)
-      .mergeMap((response: EntitiesTotalPerformancesDTO[]) => {
-        responsibilitiesData.entitiesPerformances
-          = this.performanceTransformerService
-            .transformEntityDTOsWithPerformance(response, responsibilitiesData.groupedEntities.all);
-        return Observable.of(responsibilitiesData);
-    });
-  } else if (responsibilitiesData.viewType === ViewType.accounts) {
-    return this.myPerformanceApiService
-      .getAccountsPerformanceTotals(responsibilitiesData.groupedEntities.all,
-        responsibilitiesData.filter)
-      .mergeMap((response: EntitiesTotalPerformancesDTO[]) => {
-        responsibilitiesData.entitiesPerformances
-          = this.performanceTransformerService
-            .transformEntityDTOsWithPerformance(response, responsibilitiesData.groupedEntities.all);
-        return Observable.of(responsibilitiesData);
-    });
-  } else {
-    return Observable.of(responsibilitiesData);
+    }
   }
-}
 
   public getAccountsDistributors(responsibilitiesData: ResponsibilitiesData)
     : Observable<ResponsibilitiesData> {
diff --git a/app/state/effects/responsibilities.effect.spec.ts b/app/state/effects/responsibilities.effect.spec.ts
index f931d73a..11d52b57 100644
--- a/app/state/effects/responsibilities.effect.spec.ts
+++ b/app/state/effects/responsibilities.effect.spec.ts
@@ -46,6 +46,7 @@ describe('Responsibilities Effects', () => {
   const performanceTotalMock: EntitiesTotalPerformances = getEntitiesTotalPerformancesMock();
   const responsibilityEntitiesPerformanceMock = getEntitiesPerformancesMock();
   const error = new Error(chance.string());
+  // const responsibilityEntitiesPerformanceDTOMock = getResponsibilityEntitiesPerformanceDTOMock();
 
   const responsibilitiesServiceMock = {
     getResponsibilities(responsibilitiesData: ResponsibilitiesData): Observable<ResponsibilitiesData> {
@@ -78,6 +79,33 @@ describe('Responsibilities Effects', () => {
     entitiesPerformances: responsibilityEntitiesPerformanceMock
   };
 
+  // const myPerformanceApiServiceMock = {
+  //   getResponsibilities() {
+  //     return Observable.of({positions: groupedEntitiesMock});
+  //   },
+  //   getResponsibilitiesPerformanceTotals() {
+  //     return Observable.of(responsibilityEntitiesPerformanceDTOMock);
+  //   },
+  //   getPerformanceTotal() {
+  //     return Observable.of(entitiesTotalPerformancesDTOMock);
+  //   }
+  // };
+
+  // const responsibilitiesTransformerServiceMock = {
+  //   groupPeopleByGroupedEntities(mockArgs: any): GroupedEntities {
+  //     return groupedEntitiesMock;
+  //   }
+  // };
+
+  // const performanceTransformerServiceMock = {
+  //   transformEntitiesTotalPerformancesDTO(mockArgs: any): EntitiesTotalPerformances {
+  //     return performanceTotalMock;
+  //   },
+  //   transformEntitiesPerformancesDTOs(mockArgs: any): EntitiesPerformances[] {
+  //     return responsibilityEntitiesPerformanceMock;
+  //   }
+  // };
+
   const responsibilitiesDataMock: ResponsibilitiesData = {
           filter: performanceFilterStateMock,
           positionId: positionIdMock
diff --git a/app/state/effects/responsibilities.effect.ts b/app/state/effects/responsibilities.effect.ts
index ec0ad8cf..04f251c1 100644
--- a/app/state/effects/responsibilities.effect.ts
+++ b/app/state/effects/responsibilities.effect.ts
@@ -32,8 +32,8 @@ export class ResponsibilitiesEffects {
         return Observable.of(responsibilitiesData);
       })
       .switchMap((responsibilitiesData) => this.responsibilitiesService.getResponsibilities(responsibilitiesData))
-      .switchMap((responsibilitiesData) => this.responsibilitiesService.getAccountsDistributors(responsibilitiesData))
       .switchMap((responsibilitiesData) => this.responsibilitiesService.getPerformanceTotalForGroupedEntities(responsibilitiesData))
+      .switchMap((responsibilitiesData) => this.responsibilitiesService.getAccountsDistributors(responsibilitiesData))
       .switchMap((responsibilitiesData) => this.constructSuccessAction(responsibilitiesData))
       .catch((err: Error) => Observable.of(new ResponsibilitiesActions.FetchResponsibilitiesFailureAction(err)));
   }
